package domain

import "time"

// NoteType –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–∏–ø –∑–∞–º–µ—Ç–∫–∏
type NoteType string

const (
	NoteTypeText     NoteType = "text"
	NoteTypeLink     NoteType = "link"
	NoteTypeDocument NoteType = "document"
	NoteTypeImage    NoteType = "image"
	NoteTypeVideo    NoteType = "video"
	NoteTypeAudio    NoteType = "audio"
)

// NoteCategory –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–º–µ—Ç–∫–∏
type NoteCategory string

const (
	NoteCategoryGeneral   NoteCategory = "general"
	NoteCategoryWork      NoteCategory = "work"
	NoteCategoryStudy     NoteCategory = "study"
	NoteCategoryPersonal  NoteCategory = "personal"
	NoteCategoryResources NoteCategory = "resources"
	NoteCategoryIdeas     NoteCategory = "ideas"
)

// Note –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É/–ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
type Note struct {
	ID         int          `json:"id" db:"id"`
	Title      string       `json:"title" db:"title"`
	Content    string       `json:"content" db:"content"`
	Type       NoteType     `json:"type" db:"type"`
	Category   NoteCategory `json:"category" db:"category"`
	URL        string       `json:"url,omitempty" db:"url"`
	FileID     string       `json:"file_id,omitempty" db:"file_id"`
	FileName   string       `json:"file_name,omitempty" db:"file_name"`
	FileSize   int64        `json:"file_size,omitempty" db:"file_size"`
	Tags       string       `json:"tags,omitempty" db:"tags"`
	IsFavorite bool         `json:"is_favorite" db:"is_favorite"`
	CreatedAt  time.Time    `json:"created_at" db:"created_at"`
	UpdatedAt  time.Time    `json:"updated_at" db:"updated_at"`
	UserID     int64        `json:"user_id" db:"user_id"`
}

// IsLink –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–º–µ—Ç–∫–∞ —Å—Å—ã–ª–∫–æ–π
func (n *Note) IsLink() bool {
	return n.Type == NoteTypeLink
}

// IsFile –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–º–µ—Ç–∫–∞ —Ñ–∞–π–ª–æ–º
func (n *Note) IsFile() bool {
	return n.Type == NoteTypeDocument || n.Type == NoteTypeImage ||
		n.Type == NoteTypeVideo || n.Type == NoteTypeAudio
}

// ToggleFavorite –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
func (n *Note) ToggleFavorite() {
	n.IsFavorite = !n.IsFavorite
	n.UpdatedAt = time.Now()
}

// GetDisplayType –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Ç–∏–ø –∑–∞–º–µ—Ç–∫–∏
func (n *Note) GetDisplayType() string {
	switch n.Type {
	case NoteTypeText:
		return "üìù –¢–µ–∫—Å—Ç"
	case NoteTypeLink:
		return "üîó –°—Å—ã–ª–∫–∞"
	case NoteTypeDocument:
		return "üìÑ –î–æ–∫—É–º–µ–Ω—Ç"
	case NoteTypeImage:
		return "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
	case NoteTypeVideo:
		return "üé• –í–∏–¥–µ–æ"
	case NoteTypeAudio:
		return "üéµ –ê—É–¥–∏–æ"
	default:
		return "üìù –ó–∞–º–µ—Ç–∫–∞"
	}
}

// GetDisplayCategory –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–º–µ—Ç–∫–∏
func (n *Note) GetDisplayCategory() string {
	switch n.Category {
	case NoteCategoryGeneral:
		return "üóÇÔ∏è –û–±—â–µ–µ"
	case NoteCategoryWork:
		return "üíº –†–∞–±–æ—Ç–∞"
	case NoteCategoryStudy:
		return "üìö –£—á–µ–±–∞"
	case NoteCategoryPersonal:
		return "üë§ –õ–∏—á–Ω–æ–µ"
	case NoteCategoryResources:
		return "üîó –†–µ—Å—É—Ä—Å—ã"
	case NoteCategoryIdeas:
		return "üí° –ò–¥–µ–∏"
	default:
		return "üóÇÔ∏è –û–±—â–µ–µ"
	}
}
