package telegram

import (
	"context"
	"fmt"
	"regexp"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"todolist/internal/domain"
)

// handleUserState –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
func (b *Bot) handleUserState(ctx context.Context, message *tgbotapi.Message, state *UserState) {
	chatID := message.Chat.ID
	userID := message.From.ID

	user, err := b.getUserFromTelegram(ctx, userID)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
		return
	}

	switch state.Action {
	case "add_task":
		b.handleAddTaskState(ctx, message, user, state)
	case "add_note":
		b.handleAddNoteState(ctx, message, user, state)
	case "set_notification":
		b.handleSetNotificationState(ctx, message, user, state)
	default:
		delete(b.userStates, userID)
		b.sendMessage(chatID, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
	}
}

// handleCreateTaskFromText —Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –∏–∑ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
func (b *Bot) handleCreateTaskFromText(ctx context.Context, message *tgbotapi.Message) {
	chatID := message.Chat.ID
	userID := message.From.ID

	user, err := b.getUserFromTelegram(ctx, userID)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
		return
	}

	title := strings.TrimSpace(message.Text)
	if title == "" {
		b.sendMessage(chatID, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
		return
	}

	task, err := b.taskService.CreateTask(ctx, user.ID, title, "", domain.TaskPriorityMedium)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: %s", err.Error()))
		return
	}

	b.sendMessage(chatID, fmt.Sprintf("‚úÖ –ó–∞–¥–∞—á–∞ [%d] —Å–æ–∑–¥–∞–Ω–∞!\nüìå %s", task.ID, task.Title))
}

// handleListTasksCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /tasks
func (b *Bot) handleListTasksCommand(ctx context.Context, chatID, userID int64) {
	user, err := b.getUserFromTelegram(ctx, userID)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
		return
	}

	tasks, err := b.taskService.GetTasks(ctx, user.ID)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: %s", err.Error()))
		return
	}

	b.sendMessage(chatID, b.taskService.FormatTaskList(tasks))
}

// handleAddTaskCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /add
func (b *Bot) handleAddTaskCommand(ctx context.Context, message *tgbotapi.Message) {
	chatID := message.Chat.ID
	userID := message.From.ID

	user, err := b.getUserFromTelegram(ctx, userID)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
		return
	}

	args := strings.Fields(message.Text)
	if len(args) < 2 {
		// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
		b.userStates[userID] = &UserState{
			Action:   "add_task",
			Step:     1,
			TaskData: make(map[string]string),
		}
		b.sendMessage(chatID, "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏\n\n1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
		return
	}

	title := strings.Join(args[1:], " ")
	task, err := b.taskService.CreateTask(ctx, user.ID, title, "", domain.TaskPriorityMedium)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: %s", err.Error()))
		return
	}

	b.sendMessage(chatID, fmt.Sprintf("‚úÖ –ó–∞–¥–∞—á–∞ [%d] —Å–æ–∑–¥–∞–Ω–∞!\nüìå %s", task.ID, task.Title))
}

// handleCompleteTaskCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /complete
func (b *Bot) handleCompleteTaskCommand(ctx context.Context, message *tgbotapi.Message) {
	chatID := message.Chat.ID
	userID := message.From.ID

	user, err := b.getUserFromTelegram(ctx, userID)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
		return
	}

	args := strings.Fields(message.Text)
	if len(args) < 2 {
		b.sendMessage(chatID, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏: /complete 123")
		return
	}

	taskID, err := strconv.Atoi(args[1])
	if err != nil {
		b.sendMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏")
		return
	}

	task, err := b.taskService.CompleteTask(ctx, taskID, user.ID)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %s", err.Error()))
		return
	}

	b.sendMessage(chatID, fmt.Sprintf("‚úÖ –ó–∞–¥–∞—á–∞ [%d] –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\nüìå %s", task.ID, task.Title))
}

// handleDeleteTaskCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /delete
func (b *Bot) handleDeleteTaskCommand(ctx context.Context, message *tgbotapi.Message) {
	chatID := message.Chat.ID
	userID := message.From.ID

	user, err := b.getUserFromTelegram(ctx, userID)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
		return
	}

	args := strings.Fields(message.Text)
	if len(args) < 2 {
		b.sendMessage(chatID, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏: /delete 123")
		return
	}

	taskID, err := strconv.Atoi(args[1])
	if err != nil {
		b.sendMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏")
		return
	}

	err = b.taskService.DeleteTask(ctx, taskID, user.ID)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %s", err.Error()))
		return
	}

	b.sendMessage(chatID, fmt.Sprintf("üóëÔ∏è –ó–∞–¥–∞—á–∞ [%d] —É–¥–∞–ª–µ–Ω–∞!", taskID))
}

// handleShowTaskCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /show
func (b *Bot) handleShowTaskCommand(ctx context.Context, message *tgbotapi.Message) {
	chatID := message.Chat.ID
	userID := message.From.ID

	user, err := b.getUserFromTelegram(ctx, userID)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
		return
	}

	args := strings.Fields(message.Text)
	if len(args) < 2 {
		b.sendMessage(chatID, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏: /show 123")
		return
	}

	taskID, err := strconv.Atoi(args[1])
	if err != nil {
		b.sendMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏")
		return
	}

	task, err := b.taskService.GetTaskByID(ctx, taskID, user.ID)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %s", err.Error()))
		return
	}

	b.sendMessage(chatID, b.taskService.FormatTask(task))
}

// handlePendingTasksCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /pending
func (b *Bot) handlePendingTasksCommand(ctx context.Context, chatID, userID int64) {
	user, err := b.getUserFromTelegram(ctx, userID)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
		return
	}

	tasks, err := b.taskService.GetTasksByStatus(ctx, user.ID, domain.TaskStatusPending)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: %s", err.Error()))
		return
	}

	if len(tasks) == 0 {
		b.sendMessage(chatID, "üéâ –£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á!")
		return
	}

	message := "‚è≥ –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n"
	message += b.taskService.FormatTaskList(tasks)
	b.sendMessage(chatID, message)
}

// handleCompletedTasksCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /completed
func (b *Bot) handleCompletedTasksCommand(ctx context.Context, chatID, userID int64) {
	user, err := b.getUserFromTelegram(ctx, userID)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
		return
	}

	tasks, err := b.taskService.GetTasksByStatus(ctx, user.ID, domain.TaskStatusCompleted)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: %s", err.Error()))
		return
	}

	if len(tasks) == 0 {
		b.sendMessage(chatID, "üìù –£ –≤–∞—Å –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
		return
	}

	message := "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n"
	message += b.taskService.FormatTaskList(tasks)
	b.sendMessage(chatID, message)
}

// handleSetNotificationCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /notify
func (b *Bot) handleSetNotificationCommand(ctx context.Context, message *tgbotapi.Message) {
	chatID := message.Chat.ID
	userID := message.From.ID

	user, err := b.getUserFromTelegram(ctx, userID)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
		return
	}

	args := strings.Fields(message.Text)
	if len(args) < 3 {
		// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
		b.userStates[userID] = &UserState{
			Action:   "set_notification",
			Step:     1,
			TaskData: make(map[string]string),
		}
		b.sendMessage(chatID, "‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏:")
		return
	}

	taskID, err := strconv.Atoi(args[1])
	if err != nil {
		b.sendMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏")
		return
	}

	timeStr := strings.Join(args[2:], " ")
	notifyTime, err := b.parseTime(timeStr)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: %s", err.Error()))
		return
	}

	task, err := b.taskService.SetTaskNotification(ctx, taskID, user.ID, notifyTime)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %s", err.Error()))
		return
	}

	b.sendMessage(chatID, fmt.Sprintf("‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\nüìå –ó–∞–¥–∞—á–∞ [%d]: %s\nüïê –í—Ä–µ–º—è: %s",
		task.ID, task.Title, notifyTime.Format("02.01.2006 15:04")))
}

// parseTime –ø–∞—Ä—Å–∏—Ç –≤—Ä–µ–º—è –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
func (b *Bot) parseTime(timeStr string) (time.Time, error) {
	now := time.Now()
	timeStr = strings.ToLower(strings.TrimSpace(timeStr))

	// –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏
	patterns := []struct {
		regex  *regexp.Regexp
		parser func([]string) (time.Time, error)
	}{
		// –°–µ–≥–æ–¥–Ω—è HH:MM
		{
			regexp.MustCompile(`^(\d{1,2}):(\d{2})$`),
			func(matches []string) (time.Time, error) {
				hour, _ := strconv.Atoi(matches[1])
				minute, _ := strconv.Atoi(matches[2])
				return time.Date(now.Year(), now.Month(), now.Day(), hour, minute, 0, 0, now.Location()), nil
			},
		},
		// –ó–∞–≤—Ç—Ä–∞ HH:MM
		{
			regexp.MustCompile(`^–∑–∞–≤—Ç—Ä–∞ (\d{1,2}):(\d{2})$`),
			func(matches []string) (time.Time, error) {
				hour, _ := strconv.Atoi(matches[1])
				minute, _ := strconv.Atoi(matches[2])
				tomorrow := now.AddDate(0, 0, 1)
				return time.Date(tomorrow.Year(), tomorrow.Month(), tomorrow.Day(), hour, minute, 0, 0, now.Location()), nil
			},
		},
		// DD.MM HH:MM
		{
			regexp.MustCompile(`^(\d{1,2})\.(\d{1,2}) (\d{1,2}):(\d{2})$`),
			func(matches []string) (time.Time, error) {
				day, _ := strconv.Atoi(matches[1])
				month, _ := strconv.Atoi(matches[2])
				hour, _ := strconv.Atoi(matches[3])
				minute, _ := strconv.Atoi(matches[4])
				year := now.Year()
				return time.Date(year, time.Month(month), day, hour, minute, 0, 0, now.Location()), nil
			},
		},
	}

	for _, pattern := range patterns {
		if matches := pattern.regex.FindStringSubmatch(timeStr); matches != nil {
			return pattern.parser(matches)
		}
	}

	return time.Time{}, fmt.Errorf("–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
}

// handleAddTaskState –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
func (b *Bot) handleAddTaskState(ctx context.Context, message *tgbotapi.Message, user *domain.User, state *UserState) {
	chatID := message.Chat.ID

	switch state.Step {
	case 1: // –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
		state.TaskData["title"] = message.Text
		state.Step = 2
		b.sendMessage(chatID, "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ \"-\" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")

	case 2: // –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
		description := message.Text
		if description == "-" {
			description = ""
		}
		state.TaskData["description"] = description
		state.Step = 3

		keyboard := getPriorityKeyboard()
		b.sendMessageWithKeyboard(chatID, "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏:", keyboard)

	default:
		// –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
		priority := domain.TaskPriorityMedium
		if message.Text == "high" {
			priority = domain.TaskPriorityHigh
		} else if message.Text == "low" {
			priority = domain.TaskPriorityLow
		}

		task, err := b.taskService.CreateTask(ctx, user.ID,
			state.TaskData["title"],
			state.TaskData["description"],
			priority)

		delete(b.userStates, user.TelegramID)

		if err != nil {
			b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: %s", err.Error()))
			return
		}

		b.sendMessage(chatID, fmt.Sprintf("‚úÖ –ó–∞–¥–∞—á–∞ [%d] —Å–æ–∑–¥–∞–Ω–∞!\n%s", task.ID, b.taskService.FormatTask(task)))
	}
}

// handleSetNotificationState –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
func (b *Bot) handleSetNotificationState(ctx context.Context, message *tgbotapi.Message, user *domain.User, state *UserState) {
	chatID := message.Chat.ID

	switch state.Step {
	case 1: // ID –∑–∞–¥–∞—á–∏
		taskID, err := strconv.Atoi(message.Text)
		if err != nil {
			b.sendMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
			return
		}
		state.TaskID = taskID
		state.Step = 2
		b.sendMessage(chatID, "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ 15:30 - —Å–µ–≥–æ–¥–Ω—è –≤ 15:30\n‚Ä¢ –∑–∞–≤—Ç—Ä–∞ 10:00\n‚Ä¢ 25.12 14:00")

	case 2: // –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
		notifyTime, err := b.parseTime(message.Text)
		if err != nil {
			b.sendMessage(chatID, fmt.Sprintf("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: %s\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", err.Error()))
			return
		}

		task, err := b.taskService.SetTaskNotification(ctx, state.TaskID, user.ID, notifyTime)
		delete(b.userStates, user.TelegramID)

		if err != nil {
			b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %s", err.Error()))
			return
		}

		b.sendMessage(chatID, fmt.Sprintf("‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\nüìå –ó–∞–¥–∞—á–∞ [%d]: %s\nüïê –í—Ä–µ–º—è: %s",
			task.ID, task.Title, notifyTime.Format("02.01.2006 15:04")))
	}
}

// handleAddNoteState –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
func (b *Bot) handleAddNoteState(ctx context.Context, message *tgbotapi.Message, user *domain.User, state *UserState) {
	chatID := message.Chat.ID

	switch state.Step {
	case 1: // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏
		state.NoteData["title"] = message.Text
		state.Step = 2
		b.sendMessage(chatID, "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ \"-\" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")

	case 2: // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏
		content := message.Text
		if content == "-" {
			content = ""
		}
		state.NoteData["content"] = content
		state.Step = 3

		keyboard := getCategoryKeyboard()
		b.sendMessageWithKeyboard(chatID, "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–º–µ—Ç–∫–∏:", keyboard)

	case 3: // –¢–µ–≥–∏
		state.Step = 4
		b.sendMessage(chatID, "4Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ \"-\" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")

	case 4: // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
		tags := message.Text
		if tags == "-" {
			tags = ""
		}

		category := state.NoteData["category"]
		if category == "" {
			category = "general"
		}

		note, err := b.noteService.CreateNote(ctx, user.ID,
			state.NoteData["title"],
			state.NoteData["content"],
			category,
			tags)

		delete(b.userStates, user.TelegramID)

		if err != nil {
			b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: %s", err.Error()))
			return
		}

		response := fmt.Sprintf("‚úÖ –ó–∞–º–µ—Ç–∫–∞ [%d] —Å–æ–∑–¥–∞–Ω–∞!\n\n%s", note.ID, b.noteService.FormatNoteForDisplay(note))
		msg := tgbotapi.NewMessage(chatID, response)
		msg.ParseMode = "Markdown"
		b.api.Send(msg)
	}
}
