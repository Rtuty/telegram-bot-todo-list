package telegram

import (
	"context"
	"fmt"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"todolist/internal/domain"
)

// handleListNotesCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /notes
func (b *Bot) handleListNotesCommand(ctx context.Context, chatID, userID int64) {
	user, err := b.getUserFromTelegram(ctx, userID)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
		return
	}

	notes, err := b.noteService.GetUserNotes(ctx, user.ID)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫: %s", err.Error()))
		return
	}

	if len(notes) == 0 {
		b.sendMessage(chatID, "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /note –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
		return
	}

	var response strings.Builder
	response.WriteString("üìö *–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:*\n\n")

	for i, note := range notes {
		if i >= 10 { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫ –≤ —Å–ø–∏—Å–∫–µ
			response.WriteString(fmt.Sprintf("... –∏ –µ—â–µ %d –∑–∞–º–µ—Ç–æ–∫\n", len(notes)-i))
			break
		}

		response.WriteString(fmt.Sprintf("%s [%d] %s\n", note.GetDisplayType(), note.ID, note.Title))
		if note.IsFavorite {
			response.WriteString("‚≠ê")
		}
		response.WriteString(fmt.Sprintf("üìÖ %s\n\n", note.CreatedAt.Format("02.01.2006")))
	}

	response.WriteString("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /nshow ID –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–º–µ—Ç–∫–∏")

	msg := tgbotapi.NewMessage(chatID, response.String())
	msg.ParseMode = "Markdown"
	b.api.Send(msg)
}

// handleAddNoteCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /note
func (b *Bot) handleAddNoteCommand(ctx context.Context, message *tgbotapi.Message) {
	chatID := message.Chat.ID
	userID := message.From.ID

	user, err := b.getUserFromTelegram(ctx, userID)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
		return
	}

	args := strings.Fields(message.Text)
	if len(args) < 2 {
		// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
		b.userStates[userID] = &UserState{
			Action:   "add_note",
			Step:     1,
			NoteData: make(map[string]string),
		}
		b.sendMessage(chatID, "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏\n\n1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏:")
		return
	}

	title := strings.Join(args[1:], " ")

	note, err := b.noteService.CreateNote(ctx, user.ID, title, "", "general", "")
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: %s", err.Error()))
		return
	}

	b.sendMessage(chatID, fmt.Sprintf("‚úÖ –ó–∞–º–µ—Ç–∫–∞ [%d] —Å–æ–∑–¥–∞–Ω–∞!\nüìù %s", note.ID, note.Title))
}

// handleShowNoteCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /nshow
func (b *Bot) handleShowNoteCommand(ctx context.Context, message *tgbotapi.Message) {
	chatID := message.Chat.ID
	userID := message.From.ID

	user, err := b.getUserFromTelegram(ctx, userID)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
		return
	}

	args := strings.Fields(message.Text)
	if len(args) < 2 {
		b.sendMessage(chatID, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–º–µ—Ç–∫–∏: /nshow 123")
		return
	}

	noteID, err := strconv.Atoi(args[1])
	if err != nil {
		b.sendMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–º–µ—Ç–∫–∏")
		return
	}

	note, err := b.noteService.GetNote(ctx, noteID)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %s", err.Error()))
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	if note.UserID != user.ID {
		b.sendMessage(chatID, "‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
		return
	}

	response := b.noteService.FormatNoteForDisplay(note)

	msg := tgbotapi.NewMessage(chatID, response)
	msg.ParseMode = "Markdown"
	b.api.Send(msg)
}

// handleDeleteNoteCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /ndelete
func (b *Bot) handleDeleteNoteCommand(ctx context.Context, message *tgbotapi.Message) {
	chatID := message.Chat.ID
	userID := message.From.ID

	user, err := b.getUserFromTelegram(ctx, userID)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
		return
	}

	args := strings.Fields(message.Text)
	if len(args) < 2 {
		b.sendMessage(chatID, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–º–µ—Ç–∫–∏: /ndelete 123")
		return
	}

	noteID, err := strconv.Atoi(args[1])
	if err != nil {
		b.sendMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–º–µ—Ç–∫–∏")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	note, err := b.noteService.GetNote(ctx, noteID)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %s", err.Error()))
		return
	}

	if note.UserID != user.ID {
		b.sendMessage(chatID, "‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
		return
	}

	err = b.noteService.DeleteNote(ctx, noteID)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: %s", err.Error()))
		return
	}

	b.sendMessage(chatID, fmt.Sprintf("üóëÔ∏è –ó–∞–º–µ—Ç–∫–∞ [%d] —É–¥–∞–ª–µ–Ω–∞!", noteID))
}

// handleFavoriteNotesCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /favorites
func (b *Bot) handleFavoriteNotesCommand(ctx context.Context, chatID, userID int64) {
	user, err := b.getUserFromTelegram(ctx, userID)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
		return
	}

	notes, err := b.noteService.GetFavoriteNotes(ctx, user.ID)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫: %s", err.Error()))
		return
	}

	if len(notes) == 0 {
		b.sendMessage(chatID, "‚≠ê –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /favorite ID –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.")
		return
	}

	var response strings.Builder
	response.WriteString("‚≠ê *–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏:*\n\n")

	for _, note := range notes {
		response.WriteString(fmt.Sprintf("%s [%d] %s\n", note.GetDisplayType(), note.ID, note.Title))
		response.WriteString(fmt.Sprintf("üìÖ %s\n\n", note.CreatedAt.Format("02.01.2006")))
	}

	msg := tgbotapi.NewMessage(chatID, response.String())
	msg.ParseMode = "Markdown"
	b.api.Send(msg)
}

// handleToggleFavoriteCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /favorite
func (b *Bot) handleToggleFavoriteCommand(ctx context.Context, message *tgbotapi.Message) {
	chatID := message.Chat.ID
	userID := message.From.ID

	user, err := b.getUserFromTelegram(ctx, userID)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
		return
	}

	args := strings.Fields(message.Text)
	if len(args) < 2 {
		b.sendMessage(chatID, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–º–µ—Ç–∫–∏: /favorite 123")
		return
	}

	noteID, err := strconv.Atoi(args[1])
	if err != nil {
		b.sendMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–º–µ—Ç–∫–∏")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	note, err := b.noteService.GetNote(ctx, noteID)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %s", err.Error()))
		return
	}

	if note.UserID != user.ID {
		b.sendMessage(chatID, "‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
		return
	}

	updatedNote, err := b.noteService.ToggleFavorite(ctx, noteID)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %s", err.Error()))
		return
	}

	if updatedNote.IsFavorite {
		b.sendMessage(chatID, fmt.Sprintf("‚≠ê –ó–∞–º–µ—Ç–∫–∞ [%d] –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!", noteID))
	} else {
		b.sendMessage(chatID, fmt.Sprintf("‚ú® –ó–∞–º–µ—Ç–∫–∞ [%d] —É–±—Ä–∞–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", noteID))
	}
}

// handleSearchNotesCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /search
func (b *Bot) handleSearchNotesCommand(ctx context.Context, message *tgbotapi.Message) {
	chatID := message.Chat.ID
	userID := message.From.ID

	user, err := b.getUserFromTelegram(ctx, userID)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
		return
	}

	args := strings.Fields(message.Text)
	if len(args) < 2 {
		b.sendMessage(chatID, "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: /search —Ç–µ–∫—Å—Ç")
		return
	}

	query := strings.Join(args[1:], " ")

	notes, err := b.noteService.SearchNotes(ctx, user.ID, query)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: %s", err.Error()))
		return
	}

	if len(notes) == 0 {
		b.sendMessage(chatID, fmt.Sprintf("üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É \"%s\" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", query))
		return
	}

	var response strings.Builder
	response.WriteString(fmt.Sprintf("üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ \"%s\":*\n\n", query))

	for i, note := range notes {
		if i >= 10 { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
			response.WriteString(fmt.Sprintf("... –∏ –µ—â–µ %d —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n", len(notes)-i))
			break
		}

		response.WriteString(fmt.Sprintf("%s [%d] %s\n", note.GetDisplayType(), note.ID, note.Title))
		if note.IsFavorite {
			response.WriteString("‚≠ê")
		}
		response.WriteString(fmt.Sprintf("üìÖ %s\n\n", note.CreatedAt.Format("02.01.2006")))
	}

	msg := tgbotapi.NewMessage(chatID, response.String())
	msg.ParseMode = "Markdown"
	b.api.Send(msg)
}

// handleLinkNotesCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /links
func (b *Bot) handleLinkNotesCommand(ctx context.Context, chatID, userID int64) {
	user, err := b.getUserFromTelegram(ctx, userID)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
		return
	}

	notes, err := b.noteService.GetNotesByType(ctx, user.ID, domain.NoteTypeLink)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫: %s", err.Error()))
		return
	}

	if len(notes) == 0 {
		b.sendMessage(chatID, "üîó –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∫–∞–∫ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
		return
	}

	var response strings.Builder
	response.WriteString("üîó *–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏:*\n\n")

	for i, note := range notes {
		if i >= 10 {
			response.WriteString(fmt.Sprintf("... –∏ –µ—â–µ %d —Å—Å—ã–ª–æ–∫\n", len(notes)-i))
			break
		}

		response.WriteString(fmt.Sprintf("[%d] %s\n", note.ID, note.Title))
		if note.URL != "" {
			response.WriteString(fmt.Sprintf("üîó [–ü–µ—Ä–µ–π—Ç–∏](%s)\n", note.URL))
		}
		if note.IsFavorite {
			response.WriteString("‚≠ê")
		}
		response.WriteString(fmt.Sprintf("üìÖ %s\n\n", note.CreatedAt.Format("02.01.2006")))
	}

	msg := tgbotapi.NewMessage(chatID, response.String())
	msg.ParseMode = "Markdown"
	b.api.Send(msg)
}

// handleFileNotesCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /files
func (b *Bot) handleFileNotesCommand(ctx context.Context, chatID, userID int64) {
	user, err := b.getUserFromTelegram(ctx, userID)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ —Å —Ñ–∞–π–ª–∞–º–∏ (–¥–æ–∫—É–º–µ–Ω—Ç—ã, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ)
	var allFiles []*domain.Note

	for _, noteType := range []domain.NoteType{domain.NoteTypeDocument, domain.NoteTypeImage, domain.NoteTypeVideo, domain.NoteTypeAudio} {
		notes, err := b.noteService.GetNotesByType(ctx, user.ID, noteType)
		if err != nil {
			b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: %s", err.Error()))
			return
		}
		allFiles = append(allFiles, notes...)
	}

	if len(allFiles) == 0 {
		b.sendMessage(chatID, "üìé –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
		return
	}

	var response strings.Builder
	response.WriteString("üìé *–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:*\n\n")

	for i, note := range allFiles {
		if i >= 10 {
			response.WriteString(fmt.Sprintf("... –∏ –µ—â–µ %d —Ñ–∞–π–ª–æ–≤\n", len(allFiles)-i))
			break
		}

		response.WriteString(fmt.Sprintf("%s [%d] %s\n", note.GetDisplayType(), note.ID, note.Title))
		if note.FileName != "" {
			response.WriteString(fmt.Sprintf("üìÑ %s", note.FileName))
			if note.FileSize > 0 {
				response.WriteString(fmt.Sprintf(" (%.1f KB)", float64(note.FileSize)/1024))
			}
			response.WriteString("\n")
		}
		if note.IsFavorite {
			response.WriteString("‚≠ê")
		}
		response.WriteString(fmt.Sprintf("üìÖ %s\n\n", note.CreatedAt.Format("02.01.2006")))
	}

	msg := tgbotapi.NewMessage(chatID, response.String())
	msg.ParseMode = "Markdown"
	b.api.Send(msg)
}

// handleCreateNoteFromFile —Å–æ–∑–¥–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É –∏–∑ —Ñ–∞–π–ª–∞
func (b *Bot) handleCreateNoteFromFile(ctx context.Context, message *tgbotapi.Message) {
	chatID := message.Chat.ID
	userID := message.From.ID

	user, err := b.getUserFromTelegram(ctx, userID)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
		return
	}

	var fileID, fileName string
	var fileSize int64
	var noteType domain.NoteType
	var title string

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
	if message.Document != nil {
		fileID = message.Document.FileID
		fileName = message.Document.FileName
		fileSize = int64(message.Document.FileSize)
		noteType = domain.NoteTypeDocument
		title = fileName
		if message.Caption != "" {
			title = message.Caption
		}
	} else if len(message.Photo) > 0 {
		// –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
		photo := message.Photo[len(message.Photo)-1]
		fileID = photo.FileID
		fileName = fmt.Sprintf("photo_%s.jpg", photo.FileUniqueID)
		fileSize = int64(photo.FileSize)
		noteType = domain.NoteTypeImage
		title = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
		if message.Caption != "" {
			title = message.Caption
		}
	} else if message.Video != nil {
		fileID = message.Video.FileID
		fileName = message.Video.FileName
		if fileName == "" {
			fileName = fmt.Sprintf("video_%s.mp4", message.Video.FileUniqueID)
		}
		fileSize = int64(message.Video.FileSize)
		noteType = domain.NoteTypeVideo
		title = fileName
		if message.Caption != "" {
			title = message.Caption
		}
	} else if message.Audio != nil {
		fileID = message.Audio.FileID
		fileName = message.Audio.FileName
		if fileName == "" {
			fileName = fmt.Sprintf("audio_%s", message.Audio.FileUniqueID)
		}
		fileSize = int64(message.Audio.FileSize)
		noteType = domain.NoteTypeAudio
		title = fileName
		if message.Caption != "" {
			title = message.Caption
		}
	} else if message.Voice != nil {
		fileID = message.Voice.FileID
		fileName = fmt.Sprintf("voice_%s.ogg", message.Voice.FileUniqueID)
		fileSize = int64(message.Voice.FileSize)
		noteType = domain.NoteTypeAudio
		title = "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
	} else {
		return // –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞
	}

	note, err := b.noteService.CreateNoteFromFile(ctx, user.ID, title, fileID, fileName, fileSize, noteType, "general", "")
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: %s", err.Error()))
		return
	}

	response := fmt.Sprintf("‚úÖ %s [%d] —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\nüìé %s", note.GetDisplayType(), note.ID, note.Title)
	if note.FileSize > 0 {
		response += fmt.Sprintf(" (%.1f KB)", float64(note.FileSize)/1024)
	}

	b.sendMessage(chatID, response)
}
