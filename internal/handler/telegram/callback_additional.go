package telegram

import (
	"context"
	"fmt"
	"strconv"
	"strings"

	"todolist/internal/domain"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// handleSearchCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫
func (b *Bot) handleSearchCallback(ctx context.Context, chatID, userID int64) {
	b.userStates[userID] = &UserState{
		Action:   "search_notes",
		Step:     1,
		NoteData: make(map[string]string),
	}

	text := "üîç *–ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫*\n\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:"
	keyboard := getBackToMenuKeyboard()
	b.sendMessageWithKeyboard(chatID, text, keyboard)
}

// handleFavoritesCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫
func (b *Bot) handleFavoritesCallback(ctx context.Context, chatID, userID int64) {
	user, err := b.getUserFromTelegram(ctx, userID)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
		return
	}

	notes, err := b.noteService.GetFavoriteNotes(ctx, user.ID)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫: %s", err.Error()))
		return
	}

	if len(notes) == 0 {
		text := "‚≠ê –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫\n\n–î–æ–±–∞–≤—å—Ç–µ –∑–∞–º–µ—Ç–∫–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!"
		keyboard := getBackToMenuKeyboard()
		b.sendMessageWithKeyboard(chatID, text, keyboard)
		return
	}

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–º–µ—Ç–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
	var noteItems []NoteListItem
	for _, note := range notes {
		noteItems = append(noteItems, NoteListItem{
			ID:         note.ID,
			Title:      note.Title,
			IsFavorite: true,
		})
	}

	text := fmt.Sprintf("‚≠ê *–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏* (%d)\n\n–í–∞—à–∏ –ª—é–±–∏–º—ã–µ –∑–∞–º–µ—Ç–∫–∏:", len(notes))
	keyboard := getNoteListKeyboard(noteItems)
	b.sendMessageWithKeyboard(chatID, text, keyboard)
}

// handleShowNoteCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫–∞–∑ –∑–∞–º–µ—Ç–∫–∏
func (b *Bot) handleShowNoteCallback(ctx context.Context, query *tgbotapi.CallbackQuery, user *domain.User) {
	chatID := query.Message.Chat.ID
	noteIDStr := strings.TrimPrefix(query.Data, "show_note_")
	noteID, err := strconv.Atoi(noteIDStr)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–º–µ—Ç–∫–∏")
		return
	}

	note, err := b.noteService.GetNote(ctx, noteID)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %s", err.Error()))
		return
	}

	if note.UserID != user.ID {
		b.sendMessage(chatID, "‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
		return
	}

	text := b.noteService.FormatNoteForDisplay(note)
	keyboard := getNoteActionsKeyboard(noteID, note.IsFavorite)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

// handleDeleteNoteCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
func (b *Bot) handleDeleteNoteCallback(ctx context.Context, query *tgbotapi.CallbackQuery, user *domain.User) {
	chatID := query.Message.Chat.ID
	noteIDStr := strings.TrimPrefix(query.Data, "delete_note_")
	noteID, err := strconv.Atoi(noteIDStr)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–º–µ—Ç–∫–∏")
		return
	}

	text := "üóëÔ∏è *–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏*\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–º–µ—Ç–∫—É?"
	keyboard := getConfirmationKeyboard("delete_note", noteID)
	b.sendMessageWithKeyboard(chatID, text, keyboard)
}

// handleAddFavoriteCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
func (b *Bot) handleAddFavoriteCallback(ctx context.Context, query *tgbotapi.CallbackQuery, user *domain.User) {
	chatID := query.Message.Chat.ID
	noteIDStr := strings.TrimPrefix(query.Data, "favorite_add_")
	noteID, err := strconv.Atoi(noteIDStr)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–º–µ—Ç–∫–∏")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	note, err := b.noteService.GetNote(ctx, noteID)
	if err != nil || note.UserID != user.ID {
		b.sendMessage(chatID, "‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
		return
	}

	updatedNote, err := b.noteService.ToggleFavorite(ctx, noteID)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %s", err.Error()))
		return
	}

	text := fmt.Sprintf("‚≠ê *–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!*\n\n[%d] %s", noteID, updatedNote.Title)
	keyboard := getNoteActionsKeyboard(noteID, updatedNote.IsFavorite)
	b.sendMessageWithKeyboard(chatID, text, keyboard)
}

// handleRemoveFavoriteCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
func (b *Bot) handleRemoveFavoriteCallback(ctx context.Context, query *tgbotapi.CallbackQuery, user *domain.User) {
	chatID := query.Message.Chat.ID
	noteIDStr := strings.TrimPrefix(query.Data, "favorite_remove_")
	noteID, err := strconv.Atoi(noteIDStr)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–º–µ—Ç–∫–∏")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	note, err := b.noteService.GetNote(ctx, noteID)
	if err != nil || note.UserID != user.ID {
		b.sendMessage(chatID, "‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
		return
	}

	updatedNote, err := b.noteService.ToggleFavorite(ctx, noteID)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %s", err.Error()))
		return
	}

	text := fmt.Sprintf("‚ú® *–ó–∞–º–µ—Ç–∫–∞ —É–±—Ä–∞–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ*\n\n[%d] %s", noteID, updatedNote.Title)
	keyboard := getNoteActionsKeyboard(noteID, updatedNote.IsFavorite)
	b.sendMessageWithKeyboard(chatID, text, keyboard)
}

// handleDeleteTaskCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
func (b *Bot) handleDeleteTaskCallback(ctx context.Context, query *tgbotapi.CallbackQuery, user *domain.User) {
	chatID := query.Message.Chat.ID
	taskIDStr := strings.TrimPrefix(query.Data, "delete_")
	taskID, err := strconv.Atoi(taskIDStr)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏")
		return
	}

	text := "üóëÔ∏è *–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏*\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?"
	keyboard := getConfirmationKeyboard("delete_task", taskID)
	b.sendMessageWithKeyboard(chatID, text, keyboard)
}

// handleNotifyTaskCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏
func (b *Bot) handleNotifyTaskCallback(ctx context.Context, query *tgbotapi.CallbackQuery, user *domain.User) {
	chatID := query.Message.Chat.ID
	userID := query.From.ID
	taskIDStr := strings.TrimPrefix(query.Data, "notify_")
	taskID, err := strconv.Atoi(taskIDStr)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏")
		return
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	b.userStates[userID] = &UserState{
		Action:   "set_notification",
		Step:     1,
		TaskID:   taskID,
		TaskData: make(map[string]string),
	}

	text := "‚è∞ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n\n*–ü—Ä–∏–º–µ—Ä—ã:*\n‚Ä¢ 15:30 - —Å–µ–≥–æ–¥–Ω—è –≤ 15:30\n‚Ä¢ –∑–∞–≤—Ç—Ä–∞ 10:00\n‚Ä¢ 25.12 14:00"
	keyboard := getBackToMenuKeyboard()
	b.sendMessageWithKeyboard(chatID, text, keyboard)
}

// handlePriorityCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
func (b *Bot) handlePriorityCallback(ctx context.Context, query *tgbotapi.CallbackQuery, user *domain.User) {
	chatID := query.Message.Chat.ID
	userID := query.From.ID
	priority := strings.TrimPrefix(query.Data, "priority_")

	if state, exists := b.userStates[userID]; exists && state.Action == "add_task" && state.Step == 3 {
		state.TaskData["priority"] = priority
		b.handleAddTaskState(ctx, &tgbotapi.Message{
			Chat: &tgbotapi.Chat{ID: chatID},
			From: &tgbotapi.User{ID: userID},
			Text: priority,
		}, user, state)
	}
}

// handleCategoryCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–º–µ—Ç–∫–∏
func (b *Bot) handleCategoryCallback(ctx context.Context, query *tgbotapi.CallbackQuery, user *domain.User) {
	chatID := query.Message.Chat.ID
	userID := query.From.ID
	category := strings.TrimPrefix(query.Data, "category_")

	if state, exists := b.userStates[userID]; exists && state.Action == "add_note" && state.Step == 3 {
		state.NoteData["category"] = category
		state.Step = 4
		text := "4Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ \"-\" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
		keyboard := getBackToMenuKeyboard()
		b.sendMessageWithKeyboard(chatID, text, keyboard)
	}
}

// handleConfirmCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
func (b *Bot) handleConfirmCallback(ctx context.Context, query *tgbotapi.CallbackQuery, user *domain.User) {
	chatID := query.Message.Chat.ID
	userID := query.From.ID
	data := strings.TrimPrefix(query.Data, "confirm_")

	parts := strings.Split(data, "_")
	if len(parts) < 2 {
		b.sendMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
		return
	}

	action := parts[0]

	switch action {
	case "delete":
		if len(parts) >= 3 && parts[1] == "task" {
			taskID, err := strconv.Atoi(parts[2])
			if err != nil {
				b.sendMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏")
				return
			}

			err = b.taskService.DeleteTask(ctx, taskID, user.ID)
			if err != nil {
				b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %s", err.Error()))
				return
			}

			text := fmt.Sprintf("üóëÔ∏è *–ó–∞–¥–∞—á–∞ [%d] —É–¥–∞–ª–µ–Ω–∞!*", taskID)
			keyboard := tgbotapi.InlineKeyboardMarkup{
				InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
					{
						tgbotapi.InlineKeyboardButton{Text: "üìã –ö –∑–∞–¥–∞—á–∞–º", CallbackData: &[]string{"cmd_tasks"}[0]},
						tgbotapi.InlineKeyboardButton{Text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", CallbackData: &[]string{"cmd_menu"}[0]},
					},
				},
			}
			b.sendMessageWithKeyboard(chatID, text, keyboard)

		} else if len(parts) >= 3 && parts[1] == "note" {
			noteID, err := strconv.Atoi(parts[2])
			if err != nil {
				b.sendMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–º–µ—Ç–∫–∏")
				return
			}

			err = b.noteService.DeleteNote(ctx, noteID)
			if err != nil {
				b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %s", err.Error()))
				return
			}

			text := fmt.Sprintf("üóëÔ∏è *–ó–∞–º–µ—Ç–∫–∞ [%d] —É–¥–∞–ª–µ–Ω–∞!*", noteID)
			keyboard := tgbotapi.InlineKeyboardMarkup{
				InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
					{
						tgbotapi.InlineKeyboardButton{Text: "üìù –ö –∑–∞–º–µ—Ç–∫–∞–º", CallbackData: &[]string{"cmd_notes"}[0]},
						tgbotapi.InlineKeyboardButton{Text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", CallbackData: &[]string{"cmd_menu"}[0]},
					},
				},
			}
			b.sendMessageWithKeyboard(chatID, text, keyboard)
		}

	case "logout":
		err := b.authService.Logout(ctx, userID)
		if err != nil {
			b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ")
			return
		}

		// –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		delete(b.userStates, userID)

		b.sendMessage(chatID, "üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –ø–∞—Ä–æ–ª—å")
	}
}

// handleCancelCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –¥–µ–π—Å—Ç–≤–∏–π
func (b *Bot) handleCancelCallback(ctx context.Context, query *tgbotapi.CallbackQuery) {
	chatID := query.Message.Chat.ID

	text := "‚ùå *–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ*\n\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
	keyboard := getMainMenuKeyboard()
	b.sendMessageWithKeyboard(chatID, text, keyboard)
}
