package telegram

import (
	"context"
	"fmt"
	"strconv"
	"strings"

	"todolist/internal/domain"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// handleCallbackQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∑–∞–ø—Ä–æ—Å—ã –æ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä
func (b *Bot) handleCallbackQuery(ctx context.Context, query *tgbotapi.CallbackQuery) {
	chatID := query.Message.Chat.ID
	userID := query.From.ID
	data := query.Data

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
	callback := tgbotapi.NewCallback(query.ID, "")
	b.api.Request(callback)

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := b.getUserFromTelegram(ctx, userID)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	switch {
	case data == "cmd_menu":
		b.handleMenuCallback(ctx, chatID, userID)
	case data == "cmd_tasks":
		b.handleTasksCallback(ctx, chatID, userID)
	case data == "cmd_add_task":
		b.handleAddTaskCallback(ctx, chatID, userID)
	case data == "cmd_notes":
		b.handleNotesCallback(ctx, chatID, userID)
	case data == "cmd_add_note":
		b.handleAddNoteCallback(ctx, chatID, userID)
	case data == "cmd_pending":
		b.handlePendingCallback(ctx, chatID, userID)
	case data == "cmd_completed":
		b.handleCompletedCallback(ctx, chatID, userID)
	case data == "cmd_search":
		b.handleSearchCallback(ctx, chatID, userID)
	case data == "cmd_favorites":
		b.handleFavoritesCallback(ctx, chatID, userID)
	case data == "cmd_help":
		b.handleHelpCallback(ctx, chatID)
	case data == "cmd_logout":
		b.handleLogoutCallback(ctx, chatID, userID)
	case strings.HasPrefix(data, "complete_"):
		b.handleCompleteTaskCallback(ctx, query, user)
	case strings.HasPrefix(data, "show_"):
		b.handleShowTaskCallback(ctx, query, user)
	case strings.HasPrefix(data, "delete_"):
		b.handleDeleteTaskCallback(ctx, query, user)
	case strings.HasPrefix(data, "notify_"):
		b.handleNotifyTaskCallback(ctx, query, user)
	case strings.HasPrefix(data, "show_note_"):
		b.handleShowNoteCallback(ctx, query, user)
	case strings.HasPrefix(data, "delete_note_"):
		b.handleDeleteNoteCallback(ctx, query, user)
	case strings.HasPrefix(data, "favorite_add_"):
		b.handleAddFavoriteCallback(ctx, query, user)
	case strings.HasPrefix(data, "favorite_remove_"):
		b.handleRemoveFavoriteCallback(ctx, query, user)
	case strings.HasPrefix(data, "priority_"):
		b.handlePriorityCallback(ctx, query, user)
	case strings.HasPrefix(data, "category_"):
		b.handleCategoryCallback(ctx, query, user)
	case strings.HasPrefix(data, "confirm_"):
		b.handleConfirmCallback(ctx, query, user)
	case strings.HasPrefix(data, "cancel_"):
		b.handleCancelCallback(ctx, query)
	default:
		b.sendMessage(chatID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
	}
}

// handleMenuCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
func (b *Bot) handleMenuCallback(ctx context.Context, chatID, userID int64) {
	text := "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
	keyboard := getMainMenuKeyboard()
	b.sendMessageWithKeyboard(chatID, text, keyboard)
}

// handleTasksCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
func (b *Bot) handleTasksCallback(ctx context.Context, chatID, userID int64) {
	user, err := b.getUserFromTelegram(ctx, userID)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
		return
	}

	tasks, err := b.taskService.GetTasks(ctx, user.ID)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: %s", err.Error()))
		return
	}

	if len(tasks) == 0 {
		text := "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É!"
		keyboard := tgbotapi.InlineKeyboardMarkup{
			InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
				{
					tgbotapi.InlineKeyboardButton{Text: "‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", CallbackData: &[]string{"cmd_add_task"}[0]},
				},
				{
					tgbotapi.InlineKeyboardButton{Text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", CallbackData: &[]string{"cmd_menu"}[0]},
				},
			},
		}
		b.sendMessageWithKeyboard(chatID, text, keyboard)
		return
	}

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
	var taskItems []TaskListItem
	for _, task := range tasks {
		taskItems = append(taskItems, TaskListItem{
			ID:    task.ID,
			Title: task.Title,
		})
	}

	text := fmt.Sprintf("üìã *–í–∞—à–∏ –∑–∞–¥–∞—á–∏* (%d)\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π:", len(tasks))
	keyboard := getTaskListKeyboard(taskItems)
	b.sendMessageWithKeyboard(chatID, text, keyboard)
}

// handleAddTaskCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
func (b *Bot) handleAddTaskCallback(ctx context.Context, chatID, userID int64) {
	b.userStates[userID] = &UserState{
		Action:   "add_task",
		Step:     1,
		TaskData: make(map[string]string),
	}

	text := "üìù *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏*\n\n1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:"
	keyboard := getBackToMenuKeyboard()
	b.sendMessageWithKeyboard(chatID, text, keyboard)
}

// handleNotesCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫
func (b *Bot) handleNotesCallback(ctx context.Context, chatID, userID int64) {
	user, err := b.getUserFromTelegram(ctx, userID)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
		return
	}

	notes, err := b.noteService.GetUserNotes(ctx, user.ID)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫: %s", err.Error()))
		return
	}

	if len(notes) == 0 {
		text := "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–º–µ—Ç–∫—É!"
		keyboard := tgbotapi.InlineKeyboardMarkup{
			InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
				{
					tgbotapi.InlineKeyboardButton{Text: "üìÑ –°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É", CallbackData: &[]string{"cmd_add_note"}[0]},
				},
				{
					tgbotapi.InlineKeyboardButton{Text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", CallbackData: &[]string{"cmd_menu"}[0]},
				},
			},
		}
		b.sendMessageWithKeyboard(chatID, text, keyboard)
		return
	}

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–º–µ—Ç–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
	var noteItems []NoteListItem
	for _, note := range notes {
		noteItems = append(noteItems, NoteListItem{
			ID:         note.ID,
			Title:      note.Title,
			IsFavorite: note.IsFavorite,
		})
	}

	text := fmt.Sprintf("üìù *–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏* (%d)\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", len(notes))
	keyboard := getNoteListKeyboard(noteItems)
	b.sendMessageWithKeyboard(chatID, text, keyboard)
}

// handleAddNoteCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
func (b *Bot) handleAddNoteCallback(ctx context.Context, chatID, userID int64) {
	b.userStates[userID] = &UserState{
		Action:   "add_note",
		Step:     1,
		NoteData: make(map[string]string),
	}

	text := "üìÑ *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏*\n\n1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏:"
	keyboard := getBackToMenuKeyboard()
	b.sendMessageWithKeyboard(chatID, text, keyboard)
}

// handleCompleteTaskCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
func (b *Bot) handleCompleteTaskCallback(ctx context.Context, query *tgbotapi.CallbackQuery, user *domain.User) {
	chatID := query.Message.Chat.ID
	taskIDStr := strings.TrimPrefix(query.Data, "complete_")
	taskID, err := strconv.Atoi(taskIDStr)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏")
		return
	}

	task, err := b.taskService.CompleteTask(ctx, taskID, user.ID)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %s", err.Error()))
		return
	}

	text := fmt.Sprintf("‚úÖ *–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!*\n\nüìå [%d] %s", task.ID, task.Title)
	keyboard := tgbotapi.InlineKeyboardMarkup{
		InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
			{
				tgbotapi.InlineKeyboardButton{Text: "üìã –ö –∑–∞–¥–∞—á–∞–º", CallbackData: &[]string{"cmd_tasks"}[0]},
				tgbotapi.InlineKeyboardButton{Text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", CallbackData: &[]string{"cmd_menu"}[0]},
			},
		},
	}
	b.sendMessageWithKeyboard(chatID, text, keyboard)
}

// handleShowTaskCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ
func (b *Bot) handleShowTaskCallback(ctx context.Context, query *tgbotapi.CallbackQuery, user *domain.User) {
	chatID := query.Message.Chat.ID
	taskIDStr := strings.TrimPrefix(query.Data, "show_")
	taskID, err := strconv.Atoi(taskIDStr)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏")
		return
	}

	task, err := b.taskService.GetTaskByID(ctx, taskID, user.ID)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %s", err.Error()))
		return
	}

	text := b.taskService.FormatTask(task)
	keyboard := getTaskActionsKeyboard(taskID)
	b.sendMessageWithKeyboard(chatID, text, keyboard)
}

// handlePendingCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
func (b *Bot) handlePendingCallback(ctx context.Context, chatID, userID int64) {
	user, err := b.getUserFromTelegram(ctx, userID)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
		return
	}

	tasks, err := b.taskService.GetTasksByStatus(ctx, user.ID, domain.TaskStatusPending)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: %s", err.Error()))
		return
	}

	if len(tasks) == 0 {
		text := "‚è∞ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á\n\n–í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! üéâ"
		keyboard := getBackToMenuKeyboard()
		b.sendMessageWithKeyboard(chatID, text, keyboard)
		return
	}

	text := fmt.Sprintf("‚è∞ *–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏* (%d)\n\n%s", len(tasks), b.taskService.FormatTaskList(tasks))
	keyboard := getBackToMenuKeyboard()
	b.sendMessageWithKeyboard(chatID, text, keyboard)
}

// handleCompletedCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
func (b *Bot) handleCompletedCallback(ctx context.Context, chatID, userID int64) {
	user, err := b.getUserFromTelegram(ctx, userID)
	if err != nil {
		b.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
		return
	}

	tasks, err := b.taskService.GetTasksByStatus(ctx, user.ID, domain.TaskStatusCompleted)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: %s", err.Error()))
		return
	}

	if len(tasks) == 0 {
		text := "‚úÖ –ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á\n\n–ü–æ—Ä–∞ –≤–∑—è—Ç—å—Å—è –∑–∞ –¥–µ–ª–æ! üí™"
		keyboard := getBackToMenuKeyboard()
		b.sendMessageWithKeyboard(chatID, text, keyboard)
		return
	}

	text := fmt.Sprintf("‚úÖ *–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏* (%d)\n\n%s", len(tasks), b.taskService.FormatTaskList(tasks))
	keyboard := getBackToMenuKeyboard()
	b.sendMessageWithKeyboard(chatID, text, keyboard)
}

// handleHelpCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏
func (b *Bot) handleHelpCallback(ctx context.Context, chatID int64) {
	helpText := `‚ùì *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*

ü§ñ *–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∑–∞–º–µ—Ç–æ–∫
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –∑–∞–º–µ—Ç–∫–∞–º

üìã *–†–∞–±–æ—Ç–∞ —Å –∑–∞–¥–∞—á–∞–º–∏:*
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
‚Ä¢ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

üìù *–†–∞–±–æ—Ç–∞ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏:*
‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏ –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–π—Ç–µ —Ñ–∞–π–ª—ã
‚Ä¢ –û—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –≤–∞–∂–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏

üí° *–°–æ–≤–µ—Ç—ã:*
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
‚Ä¢ –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ –ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤`

	keyboard := getBackToMenuKeyboard()
	b.sendMessageWithKeyboard(chatID, helpText, keyboard)
}

// handleLogoutCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
func (b *Bot) handleLogoutCallback(ctx context.Context, chatID, userID int64) {
	keyboard := getConfirmationKeyboard("logout", 0)
	text := "üö™ *–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã*\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?"
	b.sendMessageWithKeyboard(chatID, text, keyboard)
}
