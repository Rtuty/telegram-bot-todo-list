package telegram

import (
	"context"
	"fmt"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"go.uber.org/zap"

	"todolist/config"
	"todolist/internal/domain"
	"todolist/internal/usecase"
)

// Bot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
type Bot struct {
	api                 *tgbotapi.BotAPI
	authService         *usecase.AuthService
	taskService         *usecase.TaskService
	noteService         *usecase.NoteService
	notificationService *usecase.NotificationService
	config              *config.Config
	logger              *zap.Logger
	userStates          map[int64]*UserState
}

// UserState —Ö—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
type UserState struct {
	Action      string
	Step        int
	TaskID      int
	NoteID      int
	TaskData    map[string]string
	NoteData    map[string]string
	LastCommand string
}

// NewBot —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
func NewBot(
	api *tgbotapi.BotAPI,
	authService *usecase.AuthService,
	taskService *usecase.TaskService,
	noteService *usecase.NoteService,
	notificationService *usecase.NotificationService,
	config *config.Config,
	logger *zap.Logger,
) *Bot {
	return &Bot{
		api:                 api,
		authService:         authService,
		taskService:         taskService,
		noteService:         noteService,
		notificationService: notificationService,
		config:              config,
		logger:              logger,
		userStates:          make(map[int64]*UserState),
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
func (b *Bot) Start(ctx context.Context) error {
	b.logger.Info("bot starting...")

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	for {
		select {
		case <-ctx.Done():
			b.logger.Info("bot stopping...")
			return ctx.Err()
		case update := <-updates:
			go b.handleUpdate(ctx, update)
		}
	}
}

// handleUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
func (b *Bot) handleUpdate(ctx context.Context, update tgbotapi.Update) {
	defer func() {
		if r := recover(); r != nil {
			b.logger.Error("panic in update handler", zap.Any("panic", r))
		}
	}()

	if update.Message != nil {
		b.handleMessage(ctx, update.Message)
	} else if update.CallbackQuery != nil {
		b.handleCallbackQuery(ctx, update.CallbackQuery)
	}
}

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleMessage(ctx context.Context, message *tgbotapi.Message) {
	userID := message.From.ID
	chatID := message.Chat.ID

	b.logger.Info("received message",
		zap.Int64("user_id", userID),
		zap.Int64("chat_id", chatID),
		zap.String("text", message.Text))

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥—ã /start)
	if !strings.HasPrefix(message.Text, "/start") {
		user, err := b.authService.IsAuthenticated(ctx, userID)
		if err != nil {
			b.sendMessage(chatID, "üîê –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
			return
		}
		userID = user.ID // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if state, exists := b.userStates[userID]; exists && state.Action != "" {
		b.handleUserState(ctx, message, state)
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
	if message.IsCommand() {
		b.handleCommand(ctx, message)
	} else if message.Document != nil || len(message.Photo) > 0 || message.Video != nil ||
		message.Audio != nil || message.Voice != nil {
		// –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª, —Å–æ–∑–¥–∞–µ–º –∑–∞–º–µ—Ç–∫—É –∏–∑ —Ñ–∞–π–ª–∞
		b.handleCreateNoteFromFile(ctx, message)
	} else {
		// –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
		b.handleCreateTaskFromText(ctx, message)
	}
}

// handleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
func (b *Bot) handleCommand(ctx context.Context, message *tgbotapi.Message) {
	chatID := message.Chat.ID
	userID := message.From.ID

	switch message.Command() {
	case "start":
		b.handleStartCommand(ctx, message)
	case "help":
		b.handleHelpCommand(chatID)
	case "tasks", "list":
		b.handleListTasksCommand(ctx, chatID, userID)
	case "add", "new":
		b.handleAddTaskCommand(ctx, message)
	case "complete", "done":
		b.handleCompleteTaskCommand(ctx, message)
	case "delete", "del":
		b.handleDeleteTaskCommand(ctx, message)
	case "show", "get":
		b.handleShowTaskCommand(ctx, message)
	case "pending":
		b.handlePendingTasksCommand(ctx, chatID, userID)
	case "completed":
		b.handleCompletedTasksCommand(ctx, chatID, userID)
	case "notify":
		b.handleSetNotificationCommand(ctx, message)
	case "notes":
		b.handleListNotesCommand(ctx, chatID, userID)
	case "note":
		b.handleAddNoteCommand(ctx, message)
	case "nshow":
		b.handleShowNoteCommand(ctx, message)
	case "ndelete":
		b.handleDeleteNoteCommand(ctx, message)
	case "favorites":
		b.handleFavoriteNotesCommand(ctx, chatID, userID)
	case "favorite":
		b.handleToggleFavoriteCommand(ctx, message)
	case "search":
		b.handleSearchNotesCommand(ctx, message)
	case "links":
		b.handleLinkNotesCommand(ctx, chatID, userID)
	case "files":
		b.handleFileNotesCommand(ctx, chatID, userID)
	case "logout":
		b.handleLogoutCommand(ctx, chatID, userID)
	default:
		b.sendMessage(chatID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
	}
}

// handleStartCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (b *Bot) handleStartCommand(ctx context.Context, message *tgbotapi.Message) {
	chatID := message.Chat.ID
	userID := message.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	if _, err := b.authService.IsAuthenticated(ctx, userID); err == nil {
		b.sendMessage(chatID, "üëã –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥.")
		return
	}

	args := strings.Fields(message.Text)
	if len(args) < 2 {
		b.sendMessage(chatID, "üîê –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ: /start –≤–∞—à_–ø–∞—Ä–æ–ª—å")
		return
	}

	password := strings.Join(args[1:], " ")
	username := ""
	if message.From.UserName != "" {
		username = "@" + message.From.UserName
	}

	user, err := b.authService.Login(ctx, userID, username,
		message.From.FirstName, message.From.LastName, password)
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: %s", err.Error()))
		return
	}

	welcomeMsg := fmt.Sprintf("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s!\n\n", user.FirstName)
	welcomeMsg += "–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Todo Bot.\n\n"
	welcomeMsg += "üìù –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
	welcomeMsg += "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏\n"
	welcomeMsg += "‚Ä¢ /tasks - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á\n"
	welcomeMsg += "‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n"
	welcomeMsg += "–ù–∞—á–Ω–∏—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ —É–∂–µ —Å–µ–π—á–∞—Å! üöÄ"

	b.sendMessage(chatID, welcomeMsg)
}

// handleHelpCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
func (b *Bot) handleHelpCommand(chatID int64) {
	helpText := `üìñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º Todo Bot*

üîê *–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:*
/start –ø–∞—Ä–æ–ª—å - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ

üìù *–†–∞–±–æ—Ç–∞ —Å –∑–∞–¥–∞—á–∞–º–∏:*
/tasks, /list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
/pending - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
/completed - –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
/add –Ω–∞–∑–≤–∞–Ω–∏–µ - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
/complete ID - –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
/delete ID - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
/show ID - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ

üìö *–†–∞–±–æ—Ç–∞ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏:*
/notes - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏
/note –∑–∞–≥–æ–ª–æ–≤–æ–∫ - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
/nshow ID - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ç–∫—É
/ndelete ID - —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
/favorites - –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
/favorite ID - –¥–æ–±–∞–≤–∏—Ç—å/—É–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
/search –∑–∞–ø—Ä–æ—Å - –ø–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫
/links - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏
/files - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã

‚è∞ *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*
/notify ID –≤—Ä–µ–º—è - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
   –ü—Ä–∏–º–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–∏:
   ‚Ä¢ 15:30 - —Å–µ–≥–æ–¥–Ω—è –≤ 15:30
   ‚Ä¢ –∑–∞–≤—Ç—Ä–∞ 10:00 - –∑–∞–≤—Ç—Ä–∞ –≤ 10:00
   ‚Ä¢ 25.12 14:00 - 25 –¥–µ–∫–∞–±—Ä—è –≤ 14:00

üîß *–ü—Ä–æ—á–µ–µ:*
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/logout - –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã

üí° *–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ:*
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç - –æ–Ω —Å—Ç–∞–Ω–µ—Ç –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ–π!
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - —Å—Ç–∞–Ω–µ—Ç –∑–∞–º–µ—Ç–∫–æ–π!

üìã *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á:*
üî¥ –≤—ã—Å–æ–∫–∏–π | üü° —Å—Ä–µ–¥–Ω–∏–π | üü¢ –Ω–∏–∑–∫–∏–π`

	msg := tgbotapi.NewMessage(chatID, helpText)
	msg.ParseMode = "Markdown"
	b.api.Send(msg)
}

// sendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func (b *Bot) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	if _, err := b.api.Send(msg); err != nil {
		b.logger.Error("failed to send message", zap.Error(err))
	}
}

// sendMessageWithKeyboard –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
func (b *Bot) sendMessageWithKeyboard(chatID int64, text string, keyboard tgbotapi.InlineKeyboardMarkup) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboard
	if _, err := b.api.Send(msg); err != nil {
		b.logger.Error("failed to send message with keyboard", zap.Error(err))
	}
}

// getUserFromTelegram –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–∞
func (b *Bot) getUserFromTelegram(ctx context.Context, telegramUserID int64) (*domain.User, error) {
	return b.authService.IsAuthenticated(ctx, telegramUserID)
}
