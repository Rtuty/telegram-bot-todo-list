package telegram

import (
	"fmt"
	"strconv"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// getMainMenuKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
func getMainMenuKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.InlineKeyboardMarkup{
		InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
			{
				tgbotapi.InlineKeyboardButton{Text: "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", CallbackData: &[]string{"cmd_tasks"}[0]},
				tgbotapi.InlineKeyboardButton{Text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", CallbackData: &[]string{"cmd_add_task"}[0]},
			},
			{
				tgbotapi.InlineKeyboardButton{Text: "üìù –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏", CallbackData: &[]string{"cmd_notes"}[0]},
				tgbotapi.InlineKeyboardButton{Text: "üìÑ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", CallbackData: &[]string{"cmd_add_note"}[0]},
			},
			{
				tgbotapi.InlineKeyboardButton{Text: "‚è∞ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏", CallbackData: &[]string{"cmd_pending"}[0]},
				tgbotapi.InlineKeyboardButton{Text: "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", CallbackData: &[]string{"cmd_completed"}[0]},
			},
			{
				tgbotapi.InlineKeyboardButton{Text: "üîç –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫", CallbackData: &[]string{"cmd_search"}[0]},
				tgbotapi.InlineKeyboardButton{Text: "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ", CallbackData: &[]string{"cmd_favorites"}[0]},
			},
			{
				tgbotapi.InlineKeyboardButton{Text: "‚ùì –°–ø—Ä–∞–≤–∫–∞", CallbackData: &[]string{"cmd_help"}[0]},
				tgbotapi.InlineKeyboardButton{Text: "üö™ –í—ã–π—Ç–∏", CallbackData: &[]string{"cmd_logout"}[0]},
			},
		},
	}
}

// getTaskActionsKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–¥–∞—á–µ–π
func getTaskActionsKeyboard(taskID int) tgbotapi.InlineKeyboardMarkup {
	taskIDStr := strconv.Itoa(taskID)
	return tgbotapi.InlineKeyboardMarkup{
		InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
			{
				tgbotapi.InlineKeyboardButton{Text: "‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", CallbackData: &[]string{"complete_" + taskIDStr}[0]},
				tgbotapi.InlineKeyboardButton{Text: "üëÄ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", CallbackData: &[]string{"show_" + taskIDStr}[0]},
			},
			{
				tgbotapi.InlineKeyboardButton{Text: "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", CallbackData: &[]string{"notify_" + taskIDStr}[0]},
				tgbotapi.InlineKeyboardButton{Text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", CallbackData: &[]string{"delete_" + taskIDStr}[0]},
			},
			{
				tgbotapi.InlineKeyboardButton{Text: "üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–∞–º", CallbackData: &[]string{"cmd_tasks"}[0]},
			},
		},
	}
}

// getPriorityKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–∞–¥–∞—á–∏
func getPriorityKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.InlineKeyboardMarkup{
		InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
			{
				tgbotapi.InlineKeyboardButton{Text: "üî¥ –í—ã—Å–æ–∫–∏–π", CallbackData: &[]string{"priority_high"}[0]},
				tgbotapi.InlineKeyboardButton{Text: "üü° –°—Ä–µ–¥–Ω–∏–π", CallbackData: &[]string{"priority_medium"}[0]},
				tgbotapi.InlineKeyboardButton{Text: "üü¢ –ù–∏–∑–∫–∏–π", CallbackData: &[]string{"priority_low"}[0]},
			},
		},
	}
}

// getCategoryKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–º–µ—Ç–∫–∏
func getCategoryKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.InlineKeyboardMarkup{
		InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
			{
				tgbotapi.InlineKeyboardButton{Text: "üóÇÔ∏è –û–±—â–µ–µ", CallbackData: &[]string{"category_general"}[0]},
				tgbotapi.InlineKeyboardButton{Text: "üíº –†–∞–±–æ—Ç–∞", CallbackData: &[]string{"category_work"}[0]},
			},
			{
				tgbotapi.InlineKeyboardButton{Text: "üìö –£—á–µ–±–∞", CallbackData: &[]string{"category_study"}[0]},
				tgbotapi.InlineKeyboardButton{Text: "üë§ –õ–∏—á–Ω–æ–µ", CallbackData: &[]string{"category_personal"}[0]},
			},
			{
				tgbotapi.InlineKeyboardButton{Text: "üîó –†–µ—Å—É—Ä—Å—ã", CallbackData: &[]string{"category_resources"}[0]},
				tgbotapi.InlineKeyboardButton{Text: "üí° –ò–¥–µ–∏", CallbackData: &[]string{"category_ideas"}[0]},
			},
		},
	}
}

// getNoteActionsKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–º–µ—Ç–∫–æ–π
func getNoteActionsKeyboard(noteID int, isFavorite bool) tgbotapi.InlineKeyboardMarkup {
	noteIDStr := strconv.Itoa(noteID)
	favoriteText := "‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
	favoriteAction := "favorite_add_" + noteIDStr

	if isFavorite {
		favoriteText = "‚ú® –£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
		favoriteAction = "favorite_remove_" + noteIDStr
	}

	return tgbotapi.InlineKeyboardMarkup{
		InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
			{
				tgbotapi.InlineKeyboardButton{Text: favoriteText, CallbackData: &favoriteAction},
				tgbotapi.InlineKeyboardButton{Text: "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", CallbackData: &[]string{"edit_note_" + noteIDStr}[0]},
			},
			{
				tgbotapi.InlineKeyboardButton{Text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", CallbackData: &[]string{"delete_note_" + noteIDStr}[0]},
				tgbotapi.InlineKeyboardButton{Text: "üîô –ö –∑–∞–º–µ—Ç–∫–∞–º", CallbackData: &[]string{"cmd_notes"}[0]},
			},
		},
	}
}

// getTaskListKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
func getTaskListKeyboard(tasks []TaskListItem) tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ (–º–∞–∫—Å–∏–º—É–º 5)
	for i, task := range tasks {
		if i >= 5 {
			break
		}

		taskIDStr := strconv.Itoa(task.ID)
		completeBtn := tgbotapi.InlineKeyboardButton{
			Text:         "‚úÖ",
			CallbackData: &[]string{"complete_" + taskIDStr}[0],
		}
		showBtn := tgbotapi.InlineKeyboardButton{
			Text:         fmt.Sprintf("üëÄ [%d] %s", task.ID, truncateString(task.Title, 20)),
			CallbackData: &[]string{"show_" + taskIDStr}[0],
		}

		rows = append(rows, []tgbotapi.InlineKeyboardButton{completeBtn, showBtn})
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	rows = append(rows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.InlineKeyboardButton{Text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", CallbackData: &[]string{"cmd_add_task"}[0]},
		tgbotapi.InlineKeyboardButton{Text: "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", CallbackData: &[]string{"cmd_tasks"}[0]},
	})

	rows = append(rows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.InlineKeyboardButton{Text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", CallbackData: &[]string{"cmd_menu"}[0]},
	})

	return tgbotapi.InlineKeyboardMarkup{InlineKeyboard: rows}
}

// getNoteListKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫
func getNoteListKeyboard(notes []NoteListItem) tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–º–µ—Ç–∫–∏ (–º–∞–∫—Å–∏–º—É–º 5)
	for i, note := range notes {
		if i >= 5 {
			break
		}

		noteIDStr := strconv.Itoa(note.ID)
		favoriteIcon := ""
		if note.IsFavorite {
			favoriteIcon = "‚≠ê"
		}

		showBtn := tgbotapi.InlineKeyboardButton{
			Text:         fmt.Sprintf("%süìù [%d] %s", favoriteIcon, note.ID, truncateString(note.Title, 18)),
			CallbackData: &[]string{"show_note_" + noteIDStr}[0],
		}

		rows = append(rows, []tgbotapi.InlineKeyboardButton{showBtn})
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	rows = append(rows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.InlineKeyboardButton{Text: "üìÑ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", CallbackData: &[]string{"cmd_add_note"}[0]},
		tgbotapi.InlineKeyboardButton{Text: "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", CallbackData: &[]string{"cmd_notes"}[0]},
	})

	rows = append(rows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.InlineKeyboardButton{Text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", CallbackData: &[]string{"cmd_menu"}[0]},
	})

	return tgbotapi.InlineKeyboardMarkup{InlineKeyboard: rows}
}

// getConfirmationKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
func getConfirmationKeyboard(action string, itemID int) tgbotapi.InlineKeyboardMarkup {
	itemIDStr := strconv.Itoa(itemID)
	return tgbotapi.InlineKeyboardMarkup{
		InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
			{
				tgbotapi.InlineKeyboardButton{Text: "‚úÖ –î–∞", CallbackData: &[]string{"confirm_" + action + "_" + itemIDStr}[0]},
				tgbotapi.InlineKeyboardButton{Text: "‚ùå –û—Ç–º–µ–Ω–∞", CallbackData: &[]string{"cancel_" + action}[0]},
			},
		},
	}
}

// getBackToMenuKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
func getBackToMenuKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.InlineKeyboardMarkup{
		InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
			{
				tgbotapi.InlineKeyboardButton{Text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", CallbackData: &[]string{"cmd_menu"}[0]},
			},
		},
	}
}

// TaskListItem –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
type TaskListItem struct {
	ID    int
	Title string
}

// NoteListItem –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
type NoteListItem struct {
	ID         int
	Title      string
	IsFavorite bool
}

// truncateString –æ–±—Ä–µ–∑–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
func truncateString(s string, maxLen int) string {
	if len(s) <= maxLen {
		return s
	}
	return s[:maxLen-3] + "..."
}
