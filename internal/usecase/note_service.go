package usecase

import (
	"context"
	"fmt"
	"net/url"
	"regexp"
	"strings"
	"time"

	"todolist/internal/domain"
)

// NoteService –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–º–µ—Ç–∫–∞–º–∏
type NoteService struct {
	noteRepo domain.NoteRepository
}

// NewNoteService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä NoteService
func NewNoteService(noteRepo domain.NoteRepository) *NoteService {
	return &NoteService{
		noteRepo: noteRepo,
	}
}

// CreateNote —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
func (s *NoteService) CreateNote(ctx context.Context, userID int64, title, content, category, tags string) (*domain.Note, error) {
	note := &domain.Note{
		Title:    title,
		Content:  content,
		Category: domain.NoteCategory(category),
		Tags:     tags,
		UserID:   userID,
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–º–µ—Ç–∫–∏
	note.Type = s.determineNoteType(content)

	// –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞, –∏–∑–≤–ª–µ–∫–∞–µ–º URL
	if note.Type == domain.NoteTypeLink {
		note.URL = s.extractURL(content)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	if note.Category == "" {
		note.Category = domain.NoteCategoryGeneral
	}

	err := s.noteRepo.Create(ctx, note)
	if err != nil {
		return nil, fmt.Errorf("failed to create note: %w", err)
	}

	return note, nil
}

// CreateNoteFromFile —Å–æ–∑–¥–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É –∏–∑ —Ñ–∞–π–ª–∞
func (s *NoteService) CreateNoteFromFile(ctx context.Context, userID int64, title, fileID, fileName string, fileSize int64, noteType domain.NoteType, category, tags string) (*domain.Note, error) {
	note := &domain.Note{
		Title:    title,
		Type:     noteType,
		Category: domain.NoteCategory(category),
		FileID:   fileID,
		FileName: fileName,
		FileSize: fileSize,
		Tags:     tags,
		UserID:   userID,
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	if note.Category == "" {
		note.Category = domain.NoteCategoryGeneral
	}

	err := s.noteRepo.Create(ctx, note)
	if err != nil {
		return nil, fmt.Errorf("failed to create note from file: %w", err)
	}

	return note, nil
}

// GetNote –ø–æ–ª—É—á–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É –ø–æ ID
func (s *NoteService) GetNote(ctx context.Context, id int) (*domain.Note, error) {
	note, err := s.noteRepo.GetByID(ctx, id)
	if err != nil {
		return nil, fmt.Errorf("failed to get note: %w", err)
	}

	return note, nil
}

// GetUserNotes –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (s *NoteService) GetUserNotes(ctx context.Context, userID int64) ([]*domain.Note, error) {
	notes, err := s.noteRepo.GetByUserID(ctx, userID)
	if err != nil {
		return nil, fmt.Errorf("failed to get user notes: %w", err)
	}

	return notes, nil
}

// GetNotesByCategory –ø–æ–ª—É—á–∞–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
func (s *NoteService) GetNotesByCategory(ctx context.Context, userID int64, category domain.NoteCategory) ([]*domain.Note, error) {
	notes, err := s.noteRepo.GetByCategory(ctx, userID, category)
	if err != nil {
		return nil, fmt.Errorf("failed to get notes by category: %w", err)
	}

	return notes, nil
}

// GetNotesByType –ø–æ–ª—É—á–∞–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –ø–æ —Ç–∏–ø—É
func (s *NoteService) GetNotesByType(ctx context.Context, userID int64, noteType domain.NoteType) ([]*domain.Note, error) {
	notes, err := s.noteRepo.GetByType(ctx, userID, noteType)
	if err != nil {
		return nil, fmt.Errorf("failed to get notes by type: %w", err)
	}

	return notes, nil
}

// GetFavoriteNotes –ø–æ–ª—É—á–∞–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
func (s *NoteService) GetFavoriteNotes(ctx context.Context, userID int64) ([]*domain.Note, error) {
	notes, err := s.noteRepo.GetFavorites(ctx, userID)
	if err != nil {
		return nil, fmt.Errorf("failed to get favorite notes: %w", err)
	}

	return notes, nil
}

// SearchNotes –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫
func (s *NoteService) SearchNotes(ctx context.Context, userID int64, query string) ([]*domain.Note, error) {
	if query == "" {
		return nil, fmt.Errorf("search query cannot be empty")
	}

	notes, err := s.noteRepo.Search(ctx, userID, query)
	if err != nil {
		return nil, fmt.Errorf("failed to search notes: %w", err)
	}

	return notes, nil
}

// UpdateNote –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É
func (s *NoteService) UpdateNote(ctx context.Context, note *domain.Note) error {
	// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
	note.UpdatedAt = time.Now()

	// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–º–µ—Ç–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
	if note.Content != "" {
		note.Type = s.determineNoteType(note.Content)
		if note.Type == domain.NoteTypeLink {
			note.URL = s.extractURL(note.Content)
		}
	}

	err := s.noteRepo.Update(ctx, note)
	if err != nil {
		return fmt.Errorf("failed to update note: %w", err)
	}

	return nil
}

// ToggleFavorite –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏
func (s *NoteService) ToggleFavorite(ctx context.Context, noteID int) (*domain.Note, error) {
	note, err := s.noteRepo.GetByID(ctx, noteID)
	if err != nil {
		return nil, fmt.Errorf("failed to get note: %w", err)
	}

	note.ToggleFavorite()

	err = s.noteRepo.Update(ctx, note)
	if err != nil {
		return nil, fmt.Errorf("failed to toggle favorite: %w", err)
	}

	return note, nil
}

// DeleteNote —É–¥–∞–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É
func (s *NoteService) DeleteNote(ctx context.Context, id int) error {
	err := s.noteRepo.Delete(ctx, id)
	if err != nil {
		return fmt.Errorf("failed to delete note: %w", err)
	}

	return nil
}

// determineNoteType –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∑–∞–º–µ—Ç–∫–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
func (s *NoteService) determineNoteType(content string) domain.NoteType {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Å—ã–ª–∫–æ–π
	if s.isURL(content) {
		return domain.NoteTypeLink
	}

	return domain.NoteTypeText
}

// isURL –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ URL
func (s *NoteService) isURL(str string) bool {
	// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ URL
	urlRegex := regexp.MustCompile(`^https?://`)
	if urlRegex.MatchString(str) {
		return true
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É
	_, err := url.ParseRequestURI(str)
	return err == nil && (strings.HasPrefix(str, "http://") || strings.HasPrefix(str, "https://"))
}

// extractURL –∏–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
func (s *NoteService) extractURL(content string) string {
	lines := strings.Split(content, "\n")
	for _, line := range lines {
		line = strings.TrimSpace(line)
		if s.isURL(line) {
			return line
		}
	}
	return ""
}

// FormatNoteForDisplay —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–º–µ—Ç–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
func (s *NoteService) FormatNoteForDisplay(note *domain.Note) string {
	var builder strings.Builder

	// –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π —Ç–∏–ø–∞
	builder.WriteString(fmt.Sprintf("%s *%s*\n", note.GetDisplayType(), note.Title))

	// –ö–∞—Ç–µ–≥–æ—Ä–∏—è
	if note.Category != domain.NoteCategoryGeneral {
		builder.WriteString(fmt.Sprintf("–ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n", note.GetDisplayCategory()))
	}

	// –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
	if note.Content != "" {
		if len(note.Content) > 300 {
			builder.WriteString(fmt.Sprintf("```\n%s...\n```\n", note.Content[:300]))
		} else {
			builder.WriteString(fmt.Sprintf("```\n%s\n```\n", note.Content))
		}
	}

	// URL –¥–ª—è —Å—Å—ã–ª–æ–∫
	if note.IsLink() && note.URL != "" {
		builder.WriteString(fmt.Sprintf("üîó [–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ](%s)\n", note.URL))
	}

	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
	if note.IsFile() {
		builder.WriteString(fmt.Sprintf("üìé %s", note.FileName))
		if note.FileSize > 0 {
			builder.WriteString(fmt.Sprintf(" (%.1f KB)", float64(note.FileSize)/1024))
		}
		builder.WriteString("\n")
	}

	// –¢–µ–≥–∏
	if note.Tags != "" {
		builder.WriteString(fmt.Sprintf("üè∑Ô∏è %s\n", note.Tags))
	}

	// –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
	if note.IsFavorite {
		builder.WriteString("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ\n")
	}

	// –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
	builder.WriteString(fmt.Sprintf("üìÖ %s", note.CreatedAt.Format("02.01.2006 15:04")))

	return builder.String()
}
